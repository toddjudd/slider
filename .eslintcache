[{"c:\\git\\slider\\src\\index.js":"1","c:\\git\\slider\\src\\components\\TaskSelector\\TaskSelector.js":"2","c:\\git\\slider\\src\\components\\Slider\\Slider.js":"3","c:\\git\\slider\\src\\components\\AllSelector\\AllSelector.js":"4","c:\\git\\slider\\src\\lib\\mix.js":"5","c:\\git\\slider\\src\\components\\AssigneeSelector\\AssigneeSelector.js":"6","c:\\git\\slider\\src\\data.js":"7"},{"size":414,"mtime":1608859379209,"results":"8","hashOfConfig":"9"},{"size":1179,"mtime":1608874414358,"results":"10","hashOfConfig":"9"},{"size":4135,"mtime":1608859317725,"results":"11","hashOfConfig":"9"},{"size":665,"mtime":1608859476331,"results":"12","hashOfConfig":"9"},{"size":977,"mtime":1608773888006,"results":"13","hashOfConfig":"9"},{"size":985,"mtime":1608863873483,"results":"14","hashOfConfig":"9"},{"size":542,"mtime":1608859382730,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1m0l3wv",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"c:\\git\\slider\\src\\index.js",[],"c:\\git\\slider\\src\\components\\TaskSelector\\TaskSelector.js",[],"c:\\git\\slider\\src\\components\\Slider\\Slider.js",["32"],"import { forwardRef, useEffect, useRef, useState } from 'react';\r\nimport './Slider.less';\r\nimport mix from '../../lib/mix';\r\n\r\nconst Dot = forwardRef((props, ref) => {\r\n  return (\r\n    <div className='Dot' ref={ref} {...props}>\r\n      <i className={props.deadly ? 'fas fa-skull' : 'fas fa-arrows-h'}></i>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst Value = (props) => {\r\n  const { width, value, maxValue } = props;\r\n  return (\r\n    <div className='Value'>\r\n      <div\r\n        className='value-box'\r\n        style={{ left: `${(value / maxValue) * width}px` }}>\r\n        <span>{props.value}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Track = (props) => {\r\n  const { width, setWidth, value, setValue, maxValue } = props;\r\n  const trackRef = useRef();\r\n  const dotRef = useRef();\r\n\r\n  //is this needed?\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setWidth(trackRef.current.offsetWidth - dotRef.current.offsetWidth);\r\n    };\r\n    setWidth(trackRef.current.offsetWidth - dotRef.current.offsetWidth);\r\n    window.addEventListener('resize', handleResize);\r\n  }, [trackRef, dotRef, setWidth]);\r\n\r\n  const handleMouseDown = (e) => {\r\n    //ignore right click\r\n    if (e.which === 3 || e.button === 2) return;\r\n    //remove text selection\r\n    e.preventDefault();\r\n\r\n    console.log('Clicking Track');\r\n    document.addEventListener('mousemove', handleMouseMove);\r\n    document.addEventListener('mouseup', handleMouseUp);\r\n    handleMouseMove(e);\r\n  };\r\n\r\n  const handleMouseMove = (e) => {\r\n    console.log('Moving Mouse');\r\n    //compare to track\r\n    //track offset = distance from left edge\r\n    const trackOffest = trackRef.current.getBoundingClientRect().left;\r\n    //track width = track width\r\n    const trackWidth = trackRef.current.offsetWidth;\r\n    //clientx - track offest = pixles between mouse and left edge\r\n    let mouseTrackDif = e.clientX - trackOffest;\r\n    //limit mouse track dif to left/right edge of track\r\n    if (mouseTrackDif < 0) {\r\n      mouseTrackDif = 0;\r\n    } else if (mouseTrackDif > trackWidth) {\r\n      mouseTrackDif = trackWidth;\r\n    }\r\n    //(clientx - track offest)/track width = percent of track used\r\n    const percentTrackUsed = mouseTrackDif / trackWidth;\r\n    //percent of trac used * maxValue = value\r\n    setValue(Math.floor(percentTrackUsed * maxValue));\r\n  };\r\n\r\n  const handleMouseUp = (e) => {\r\n    console.log('Releasing Track');\r\n    document.removeEventListener('mousemove', handleMouseMove);\r\n    document.removeEventListener('mouseup', handleMouseUp);\r\n  };\r\n\r\n  let deadly = (value / maxValue) * 100 > 80;\r\n  return (\r\n    <div className='Track' ref={trackRef} onMouseDown={handleMouseDown}>\r\n      <div className='min endcap'>\r\n        <span>0</span>\r\n      </div>\r\n      <Dot\r\n        ref={dotRef}\r\n        style={{\r\n          left: `${(value / maxValue) * width}px`,\r\n          color: `${\r\n            deadly ? '#444' : mix('FF333A', '8AC926', (value / maxValue) * 100)\r\n          }`,\r\n        }}\r\n        deadly={deadly}></Dot>\r\n      <div className='max endcap'>\r\n        <span>{maxValue}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Ledgend = (props) => {\r\n  const { width, maxValue } = props;\r\n  let ticks = [];\r\n  for (let i = 0; i < 4; i++) {\r\n    let fifth = Math.floor((i + 1) * 0.2 * maxValue);\r\n    //this next bit is bad..\r\n    if (fifth > 0) {\r\n      ticks.push(\r\n        <div\r\n          className='tick-box'\r\n          style={{\r\n            left: `${(fifth / maxValue) * width}px`,\r\n          }}>\r\n          <span key={i}>{fifth}</span>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  console.log(ticks);\r\n  return (\r\n    <div className='Ledgend'>\r\n      {ticks.map((tick) => {\r\n        return tick;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Slider = (props) => {\r\n  const { value, setValue, maxValue, minValue } = props;\r\n  const [width, setWidth] = useState(0);\r\n\r\n  return (\r\n    <div className='Slider'>\r\n      <Value {...{ width, setWidth, value, setValue, maxValue }}></Value>\r\n      <Track {...{ width, setWidth, value, setValue, maxValue }}></Track>\r\n      <Ledgend {...{ width, maxValue }}></Ledgend>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Slider;\r\n",["33","34"],"c:\\git\\slider\\src\\components\\AllSelector\\AllSelector.js",[],"c:\\git\\slider\\src\\lib\\mix.js",[],"c:\\git\\slider\\src\\components\\AssigneeSelector\\AssigneeSelector.js",[],"c:\\git\\slider\\src\\data.js",[],{"ruleId":"35","severity":1,"message":"36","line":130,"column":38,"nodeType":"37","messageId":"38","endLine":130,"endColumn":46},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},"no-unused-vars","'minValue' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-global-assign","no-unsafe-negation"]