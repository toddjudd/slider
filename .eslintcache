[{"c:\\git\\slider\\src\\index.js":"1","c:\\git\\slider\\src\\reportWebVitals.js":"2","c:\\git\\slider\\src\\Bar.js":"3","c:\\git\\slider\\src\\Dot.js":"4","c:\\git\\slider\\src\\App.js":"5","c:\\git\\slider\\src\\mix.js":"6","c:\\git\\slider\\src\\Slider.js":"7"},{"size":487,"mtime":1608702621100,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":633,"mtime":1608266805566,"results":"11","hashOfConfig":"12"},{"size":523,"mtime":1608356554492,"results":"13","hashOfConfig":"9"},{"size":374,"mtime":1608501137252,"results":"14","hashOfConfig":"9"},{"size":977,"mtime":1608271895786,"results":"15","hashOfConfig":"9"},{"size":3807,"mtime":1608703167618,"results":"16","hashOfConfig":"9"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1m0l3wv",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tkhy3u",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"21"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"c:\\git\\slider\\src\\index.js",[],"c:\\git\\slider\\src\\reportWebVitals.js",[],["34","35"],"c:\\git\\slider\\src\\Bar.js",[],"c:\\git\\slider\\src\\Dot.js",[],["36","37"],"c:\\git\\slider\\src\\App.js",["38","39"],"import { useAtom } from 'jotai';\r\n\r\nconst App = (props) => {\r\n  const { countAtom, maxCountAtom } = props.atoms;\r\n  const [count, setCount] = useAtom(countAtom);\r\n  const [maxCount, setMaxCount] = useAtom(maxCountAtom);\r\n\r\n  return (\r\n    <>\r\n      <h1>{count}</h1>\r\n      <button onClick={() => setCount((c) => c + 1)}>+</button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","c:\\git\\slider\\src\\mix.js",[],"c:\\git\\slider\\src\\Slider.js",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"40","replacedBy":"44"},{"ruleId":"42","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":6,"column":10,"nodeType":"48","messageId":"49","endLine":6,"endColumn":18},{"ruleId":"46","severity":1,"message":"50","line":6,"column":20,"nodeType":"48","messageId":"49","endLine":6,"endColumn":31},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],["51"],["52"],"no-unused-vars","'maxCount' is assigned a value but never used.","Identifier","unusedVar","'setMaxCount' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]